#+latex_compiler: xelatex 
#+latex_header: \usepackage{libertine}
#+latex_header: \usepackage{unicode-math}

#+TITLE: Perl 6, the Sessions
  
* Empathy session (30 minutes)
   :PROPERTIES:
   :Chapter:  1
   :Tools:    Pen and paper
   :END:

Took place Dec 6th, 11:30AM, in the kitchen. We talked about what kind
of things can be done, introduced the whole /course/ (air quotes
here), and talked about how everything is going to work.

* Ideas session (30 minutes)
   :PROPERTIES:
   :Chapter:  1
   :Tools:    Pen and paper
   :END:

Dec 8th, 11:00 AM. 

Let's go into the ideation phase, while not leaving the immersion phase http://www.mjvinnovation.com/blog/three-phases-design-thinking-immersion-ideation-prototyping

* Tools (30 minutes+)
   :PROPERTIES:
   :Tools:    Laptop
   :Chapter:  2
   :END:

Set up tools, starting with the editor. Atom, emacs, anything like
that, command line, how to work with it, minimal Linux, which is the
environment of choice. 
* Perl 6 (30 minutes)
   :PROPERTIES:
   :Tools:    Laptop
   :Chapter:  2
   :END:


Set it up, understand the REPL. 

Install rakudobrew and start to work with it. Class itself took like
15 minutes, and the rest was devoted to compiling latest version of
MoarVM. Note: the $ in the documentation can be mistaken for a
command.  

** Actual development

This is written way after it took place. And I do not remember
anything, so I guess it must have been rather uneventful. 

* What is free software (30 minutes)
   :PROPERTIES:
   :Tools:    Pen and paper 
   :Chapter:  2
   :END:

Probably a good talk for a Sunday morning. What is free software and
free licenses, what they mean, what it's like to create and produce
free software, why everything we do when learning a language should be
free so that other benefit from it.  

We are telling the story of Java, how it is about to become the cash
crop of Oracle who's attempting to ask for licenses, and what kind of
licenses here are and what we should do about it. 


* Teamwork with git (30 minutes)
   :PROPERTIES:
   :Tools:    Laptop
   :Chapter:  2
   :END:

The first part of this session should be used to create an ID with
GitHub or, if that's created already, to create repositories that will
be used to host the assignments and other tests. We will also learn to
collaborate using Markdown. 

An issue in this session is to learn to use the correct license, or at
least a license, for the work that will be done. A side effect is to
learn and use GitHub as a place to look for code, and how to fork a
repository to work on it. Pull requests, if time allows, if it does
not, let's yield to the next session.

** Actual development

Sign up for GitHub, create a repository and actually *do nothing* with
it. Look up Perl6 and other repos, and modify them and create pull
requests. 

Unexpected hurdles (actually I have found this before): giving the
repository a name, finding something to do a pull request, things like
that. 


* What we know so far
   :PROPERTIES:
   :Tools:    Pen and paper 
   :Chapter:  2
   :END:

Writeup of what we have learned so far and what we want to
learn. Probably "home" assignment. 


** Actual development

 We have talked about free software, a bit about Perl6, a bit
 about teamwork... Some are getting impatient over the actual lack of
 learning Perl6. So we'll have to go to that soon. Also talked a bit
 about [[https://github.com/ajs/perl6-Math-Sequences][Working on a
 Library about sequences]]. A pull request that, BTW, was accepted
 just today, on Christmas Day. 

The home assignment did not go so well. One turned it in early, one a
bit after the next session, one did not do it at all. Still doing it,
weeks after, in fact. 

** Conclusions so far 

Maybe we are out-zenning a bit with doing 7 sessions
 without a real hint of what Perl6, or for that matter any other
 language, is about. 

* Let's work with the REPL
   :PROPERTIES:
   :Tools:    Laptop
   :Chapter:  3
   :END:

First, do some basic stuff, calculator style. Then realize that you
can't go back to what we wrote before to correct or whatever; then
install linenoise with

#+BEGIN_SRC bash
zef install Linenoise
#+END_SRC

Explain Unicode and what it means for modern computing. Test some
Unicode codepoints. 

Play with operators for a while. 

Hint also at types and why ar they different and what it means for
operations. use =.WHAT=, as in


#+BEGIN_SRC perl6
π.WHAT
#+END_SRC

You'll have to find a way to type π. Probably a good option is to do
it inside emacs. But the most straightforward is to look for "unicode
symbols" in Google and copy/paste it. You can do the same with other Unicode symbols such as ⅓ or ⅕. 

** Actual development

We have discovered that =rakudobrew= was not properly installed and had a lot of fun after configuring a Compose key in Gnome. [[https://help.ubuntu.com/community/ComposeKey][Here's how to do it.]]
We eventually did some simple operations, including working with
Unicode characters. Also accessing the Javascript REPL that is
included in Firefox, and checking out how some things work, and some
others, mainly including the funny Unicode characters, do not. 




* Working with other kind of data
   :PROPERTIES:
   :Tools:    Laptop
   :Chapter:  3
   :END:

Let's have a go to working with strings, and rationals, and use
=.WHAT= to find out the type of data. Start to work with sequences,
and cool things that can be done with them, including, maybe in this
session, infinite sequences. 

** Actual development

The thing is, come this point, everyone must have tools ready. One
could not use Linenoise to access previous expressions, and it had to
be set up. Besides, by now we are using Greek and other letter by the
bushel and we can't just go to the Internet every time we need a φ. So
we have learned to use the shell from emacs, and also to use the key
combo Control-X + 8 + Enter and then the name of the letter. That way
we can also go ahead and use the three periods and infinity and other
needed.

Eventually we have started with lists, using indices in lists, and so
on. But just barely. No time to define sequences, little by little.

Also, someone is getting impatient wanting to save work, things like
that. Ah, impatience...

* Series of things (30 minutes)
  :PROPERTIES:
   :Tools:    Laptop
   :Chapter:  2
   :END:

First some non-conventional operators such as =x= and then let's proceed to talk about sequences and arrays and how to deal with infinite arrays. 

** Actual session

Some trouble with syntax, which gets in the way. Spaces where they should not be, points less or more, problems with key combinations for Greek letters... all that stuff. But pretty much, a lot done in half an hour. 
* Working with repositories
  :PROPERTIES:
  :Tools:    Laptop
  :Chapter:  3
  :END:

After the last session, where homework was introduced for the first time, we are going to work with files in repositories, which is where they should be. We will learn 

    - Download the repository to local filesystem using =git clone=
    - Add a file to the repository with =git add=
    - Record changes to the repository with =git commit=
    - Synchronize local with global repository using =git push=
    - Fork and work with other's repositories
    - Accept pull requests and pull changes into local repository with =git pull=

** Actual session

We used the "lessons learned" file that we had compiled in every
session and we had a lot of fun. One of us had just copied the Emacs
tutorial stuff, some others were corrected, we performad every
intended objective. Only unexpected thing was that git was not
configured and that we really, really, need to navigate the Linux
filesystem. 

A funny unintended consequence of all this is that is easier to learn
from scratch that to /unlearn/ what has been learned, so that newbies
perform /better/ than those that have had some access to bad
learning. Yes, it's a real WTF. 

* A series of sequences
  :PROPERTIES:
  :Tools:    Laptop
  :Chapter:  4
  :END:

Knowing about the "Reduce" operator on sequences (or ranges) and combining sequences to give new sequences. Also, recursive sequences.

** Actual session

This starts to be a little complicated. Also boring. But mostly complicated. When you are getting in some complexity, but mainly working over the same essential material, which is sequences, you start to get a bit fed up with it. So maybe we will switch to ancillary material next ocassion. 
Anyway, the concept of crossing and zipping has been caught fast by using the zipper metaphor and hand-weaving. So let us call it a day and let us go to greener pastures.

The fact that we still have not stored anything so far has not been an obstacle. No program has been written, and none has been needed. 

Repeating same things over and over is also important. Sequences of commands like opening a shell inside Emacs and typing Perl6 sometimes do not happen and need some help. 

A bit of homework: create a sequence of apartment coordinates
combining house number + floor + letter. To be turned in in a Repo. 

This has ended up in chapter 4. I will have to renumber everything. 

* Documentation is important
  :PROPERTIES:
  :Tools:    Laptop
  :Chapter:  4
  :END:

Let's learn a bit about markdown and other simple markup languages
using the Wikipedia and the "Lessons learned" file we have been
working on for some time. A few words on how to link, on how to evolve
the documentation, how to evolve it along the rest of the programs,
and on how to generate better-quality documents 
from them. Spell check, things like that.

At the same time, practice familiarity with the filesystem and
navigating in it. For instance, navigate using Nautilus and them, open
the menu and click in "Open in a terminal". Filesystem navigation is a
very necessary skill, and one that is sometimes lacking in traditional
programming. 

** Actual development
This was scheduled for January 6th, we are being kind of intensive
lately. But it is gift-giving day in Spain and we played at one of the
games  that was given. Maybe an ocassion to gamify learning, but I
failed to see how. 

* Card shuffle
  :PROPERTIES:
  :Tools:    Laptop
  :Chapter:  4
  :END:

Talk about different ways of picking random elements out of an array,
or a whole bunch of them. The single objective of this class will be
to create a deck of French cards using the correct Unicode symbols and
all, and then an expression to shuffle them. 

Finally, it will be saved as a [[https://gist.github.com][gist]] and shown to everyone for
comments. The /gist/ will have to be written in Markdown, with a
description of what it is and a step-by-step explanation of the
expression. 

** Actual development

This has been an amazing session. With very little new material, just
=pick= and =roll=, it was about putting to practice what had been done
so far, including documentation and using GitHub for publishing
things. 

The dynamics was mostly self-organized, and with three persons, two
teams have been created. This the [[https://t.co/nUspT3ohZ1][first result]] and the
[[https://gist.github.com/ElenaMerelo/3903f46a2d492dd0b76151054a598721][second team]]. They have had a lot of fun while they were doing it, and
also while writing it down in Markdown. Different solutions, different
ways of understanding the structures, but all in all it shows that
Perl 6 is a great language, allowing to do things in very different
ways. Informative error messages also help quite a lot to get things
right. 

* It is so true
  :PROPERTIES:
  :Tools:    Laptop
  :Chapter:  5
  :END:

Learning a bit about Boolean values and how to work with them. I am
not sure how to proceed with this. We can do it fast or we can do it
good. It's probably better if we do it fast. 

The basic ideas is how Boolean types are the results of checks, and
what kind of things are considered true and not true. Also a primer on
unary/preffix operators and how to call them.  

** Actual development

It has been a whole week since the last class, and it is quite obvious
this is losing a bit of steam. Life gets in the way, we are entering
college exams period, plus the rest of the life, and we could barely
squeeze 20 minutes into the morning of January 15th. It is good,
anyway, that we can continue at all, and that we have been able to
learn a bit of logic, in a logical way, asking what seems true and
what is not true and wondering why an empty string is false, while a
non-empty string is true, even if it contains "False" and things like
that. 

Then we have continued to comparisons, and I have realized some of the
comparison glyphs, such as ≤ do not work. I'll have to check that out
and update the material.

* Filtering things
  :PROPERTIES:
  :Tools:    Laptop
  :Chapter:  5
  :END:

We are going to deal with how logical expressions allow us to filter
things. It's back again to simply working with Boolean logic, only we
are going to use implicit loops and all that. 

The important thing is to think about them as mathematical
functions. You apply a /filter function/ to obtain one thing out of
other. We are going to deal also with belonging functions, and
finally, with using symbols as stand-ins for members of the array. I
realize it's a pretty jumbled up topic, but let's see. 

** Actual development
Actually, it didn't went so badly after almost a month without any
class. Set up was pretty fast, and we were up and running in no
time. We took only half an hour on a Sunday afternoon, and the concept
of stand-ins (called =Whatever=), functions and so on went rather
well. Besides, it was a good chance to start explaining the
transformative nature of languages in a functional way: functions that
take something in and return something else according to some
expression.

* Computational thinking
We do need to talk about how computers do things, and how we make
computers do things. Let's go back to the initial design thinking
stage, where we talked about what we eventually wanted to do. We might
not be able to finish it, but we can create a rough prototype along
these sessions and maybe come up with something way cooler. 

After a round of remembering and maybe changing, let us go back to
what we can /actually/ do and let us realize a few things.

- *The world is programmable*: everything is built around computers,
  the Internet and applications and we can use computers to fulfill
  our curiosity about the world, and even make it change if we
  can. The world has an API, application programming interface, which
  we can use to read, and sometimes, write, what is there. Pretty much
  everything out there has an API: your class system, the Wikipedia,
  Twitter, Spotify... 
- *Programming gives you power*: because since everything can be
  programmable, it helps you get your job done in less time and with
  more added value. It allows you to automatize repetitive tasks, to
  keep track of things, to understand better what is going on and what
  might happen in the future. 
- *We program in a community*: so there might always be someone out
  there to help us in whatever we need, answer to our doubts, and
  maybe even help us build something. We can also help someone build
  something, and then start to be part of the community. 

That is why programming is seldom the matter of a single language or
tool. In order to program the world, you have to know the world. But
you also have to know how to break down a problem to put it into a
computer. This is usually called
[[https://docs.google.com/document/d/1i0wg-BMG3TdwsShAyH_0Z1xpFnpVcMvpYJceHGWex_c/edit][computational thinking]] and consists in breaking down a problem in
several parts via these processes
- First would be  *decomposition*, breaking down the problem in parts that can be
  managed separately. 
- *Abstraction*: understand the processes behind a problem in terms of
  what is essential, not its appearance. In this process we might find
  parts of the problem have been solved with off-the-shelf software
  that we will use, as long as it is free software. *Pattern
  recognition* helps here to find the correct level of abstraction for
  a particular problem and common elements in different problems. 
- *Data collection*: how to get data into the system so that it can
  solve the problem
- *Data representation*: there are many ways of representing data in a
  computer, with different performance and constraints. Choosing the
  best one is key to being able to solve the problem quickly and
  efficiently.


* Back to the command line
  :PROPERTIES:
  :Tools:    Laptop
  :Chapter:  5
  :END:

We need to learn a bit about the command line: when we are actually in
it, what kind of orders are available, and some basic stuff, mainly in
order to combine different commands to perform tasks. 

In this session, we will also experiment with somebody else /leading/
or explaining things. 
